From 769e72db68215d0014cc4594d2eb204fe5a4c7d9 Mon Sep 17 00:00:00 2001
From: Richard Hughes <richard@hughsie.com>
Date: Wed, 8 Jan 2014 17:48:08 +0000
Subject: [PATCH 07/11] Support getting and setting the DAC value on hardware
 type 2

---
 configure.ac  |  2 +-
 src/ch-main.c | 75 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 76 insertions(+), 1 deletion(-)

diff --git a/configure.ac b/configure.ac
index 3ac3c8f..0c8dbeb 100644
--- a/configure.ac
+++ b/configure.ac
@@ -89,7 +89,7 @@ dnl ---------------------------------------------------------------------------
 PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.31.10 gobject-2.0 gmodule-2.0 gio-2.0 >= 2.25.9)
 PKG_CHECK_MODULES(GUSB, gusb >= 0.1.2)
 PKG_CHECK_MODULES(GTK, gtk+-3.0 >= 3.12.0)
-PKG_CHECK_MODULES(COLORD, colord >= 0.1.31)
+PKG_CHECK_MODULES(COLORD, colord >= 1.1.6)
 PKG_CHECK_MODULES(COLORD_GTK, colord-gtk >= 0.1.24)
 PKG_CHECK_MODULES(SOUP, libsoup-2.4)
 PKG_CHECK_MODULES(CANBERRA, libcanberra-gtk3 >= 0.10)
diff --git a/src/ch-main.c b/src/ch-main.c
index cd6fbba..06cc620 100644
--- a/src/ch-main.c
+++ b/src/ch-main.c
@@ -2374,6 +2374,71 @@ out:
 }
 
 /**
+ * ch_util_get_dac_value:
+ **/
+static gboolean
+ch_util_get_dac_value (ChUtilPrivate *priv, gchar **values, GError **error)
+{
+	gboolean ret;
+	gdouble dac_value = 0.0f;
+
+	/* get from HW */
+	ch_device_queue_get_dac_value (priv->device_queue,
+				       priv->device,
+				       &dac_value);
+	ret = ch_device_queue_process (priv->device_queue,
+				       CH_DEVICE_QUEUE_PROCESS_FLAGS_NONE,
+				       NULL,
+				       error);
+	if (!ret)
+		goto out;
+
+	g_print ("DAC value: %f\n", dac_value);
+out:
+	return ret;
+}
+
+/**
+ * ch_util_set_dac_value:
+ **/
+static gboolean
+ch_util_set_dac_value (ChUtilPrivate *priv, gchar **values, GError **error)
+{
+	gboolean ret;
+	gdouble dac_value;
+
+	/* parse */
+	if (g_strv_length (values) != 1) {
+		ret = FALSE;
+		g_set_error_literal (error, 1, 0,
+				     "invalid input, expect 'value'");
+		goto out;
+	}
+	dac_value = g_ascii_strtod (values[0], NULL);
+	if (dac_value < -0x7fff || dac_value > 0x7fff) {
+		ret = FALSE;
+		g_set_error (error, 1, 0,
+			     "invalid dac value %f",
+			     dac_value);
+		goto out;
+	}
+
+	/* set to HW */
+	ch_device_queue_set_dac_value (priv->device_queue,
+				       priv->device,
+				       dac_value);
+	ret = ch_device_queue_process (priv->device_queue,
+				       CH_DEVICE_QUEUE_PROCESS_FLAGS_NONE,
+				       NULL,
+				       error);
+	if (!ret)
+		goto out;
+
+out:
+	return ret;
+}
+
+/**
  * ch_util_get_adc_vrefs:
  **/
 static gboolean
@@ -3252,6 +3317,16 @@ main (int argc, char *argv[])
 		     _("Sets the pre scale constant"),
 		     ch_util_set_pre_scale);
 	ch_util_add (priv->cmd_array,
+		     "get-dac-value",
+		     /* TRANSLATORS: command description */
+		     _("Gets the DAC value"),
+		     ch_util_get_dac_value);
+	ch_util_add (priv->cmd_array,
+		     "set-dac-value",
+		     /* TRANSLATORS: command description */
+		     _("Sets the DAC value"),
+		     ch_util_set_dac_value);
+	ch_util_add (priv->cmd_array,
 		     "get-post-scale",
 		     /* TRANSLATORS: command description */
 		     _("Gets the post scale constant"),
-- 
1.8.4.5

